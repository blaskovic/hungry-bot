#!/bin/bash
echo "Nepal Brno"
TODAY=$(LC=C date "+%A")

# Replace all <br /> tags with a proper newline, so the menu is formatted correctly
# and easier to parse (first sed). Also, drop all HTML numeric character references
# (&#xxxx) so they don't interfere with the parsing process (second sed), and
# strip UTF-8 representations of &nbsp; (third sed exp.) to drop empty cells.
curl -s https://nepalbrno.cz/weekly-menu/ |
sed -e ':a;N;$!ba;s/<br \/>\n/ /g' | sed -e 's/\&\#[0-9]*\;//g' -e 's/\xa0//g' |
awk -v day="${TODAY:?}" '
BEGIN {
    im = 0;
    IGNORECASE = 1;
    rx = "^<td .*" day ".*?$";
    str = "";
    mcount = 0;
}

# Attempt to match the current day. If matched, set im variable to let the rest
# of the parser know we should store & print all following matches
match($0, rx) {
    im = 1;
    next;
}

# Match the pre-formatted menu item name & store it
match($0, "<td .* height=[^>]*?>(<b>)?([^<]+)", m) {
    mitem = m[2];
    if (length(mitem) == 0)
        next;

    if (im == 1)
        mcount++;
        str = mitem;
}

# Match the menu item price & print it alongside the item name
!/<td .*height=.*/ && match($0, "<td .*<b>(.+)</b></td>", m) {
    if (im == 1)
        print str " " m[1]
}

# Match the end of each daily menu section. If the im variable is set, exit the
# script, as we went through the entire menu for the current day
mcount >= 6 || /<\/table>/ {
    if(im == 1)
        exit 0;
}'
